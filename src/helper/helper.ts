import bcrypt from "bcrypt";
import jwt from 'jsonwebtoken';


require('dotenv').config();

/**
 * It takes a plain text password and returns a hashed password
 * @param {string} plaintTextPassword - The password that you want to hash.
 * @returns A Promise that resolves to a string.
 */
export const hashPassword = async (plaintTextPassword: string): Promise<string> => {
  const hash = await bcrypt.hash(plaintTextPassword, 10);
  return hash;
}

/**
 * It takes a plain text password and a hash, and returns a boolean indicating whether the plain text
 * password matches the hash
 * @param {string} plainTextPassword - The password that the user entered.
 * @param {string} hash - The hash that was generated by the bcrypt.hash() function.
 * @returns A Promise that resolves to a boolean.
 */
export const comparePassword = async (plainTextPassword: string, hash: string): Promise<boolean> => {
  const result = await bcrypt.compare(plainTextPassword, hash);
  return result;
}

/**
 * It takes a token, verifies it, and returns the user if the token is valid, otherwise it returns
 * null.
 * @param {string} token - string - the token that is passed in from the client
 * @returns The user object.
 */
export const getUser = (token: string) => {
  try {
    if (token) {
      return jwt.verify(token, String(process.env.JWT_SECRET))
    }
    return null;
  } catch(err) {
    return null
  }
}
